{"version":3,"sources":["containers/RecipeListView.js","components/Recipe.js","components/IngInput.js","components/RecipeSelect.js","App.js","serviceWorker.js","index.js"],"names":["RecipeList","props","className","initialLoad","pageStart","hasMore","useWindow","loadMore","onLoadMore","prefill","dataSource","list","renderItem","item","index","Item","Meta","avatar","src","picture_link","title","onClick","description","isLoading","formatList","stri","split","map","currElement","join","Recipe","recipe","ingredients","x","quantity","ingredient","instructions","axios","defaults","xsrfHeaderName","xsrfCookieName","TextArea","Input","IngInput","handleFake","event","get","headers","then","response","data","callback","state","value","handleChange","bind","handleSubmit","this","setState","target","preventDefault","console","log","requestOptions","start","end","ing_arr","post","placeholder","rows","onChange","type","htmlType","React","Component","count","RecipeSelect","getData","curr","res","Array","isArray","length","concat","loading","window","dispatchEvent","Event","setList","recipeList","initLoading","selectedRecipe","Container","fluid","Row","Col","xs","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1649b739.chunk.js","sourcesContent":["import React from \"react\";\nimport { List, Avatar, Button, Skeleton, Spin } from \"antd\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\n// const reducer = (accumulator, currentValue) => accumulator + currentValue.ingredient + \"\\n\";\n\nfunction RecipeList(props) {\n  return (\n    <div className=\"list-container\">\n      <InfiniteScroll\n        className=\"recipe-list\"\n        initialLoad={false}\n        pageStart={0}\n        hasMore={props.hasMore}\n        useWindow={false}\n        loadMore={props.onLoadMore}\n        prefill={true}\n      >\n        <List\n          dataSource={props.list}\n          renderItem={(item, index) => (\n            <List.Item>\n              <List.Item.Meta\n                avatar={<Avatar src={item.picture_link} />}\n                title={<a onClick={props.onClick(index)}>{item.title}</a>}\n                description=\"\"\n              />\n            </List.Item>\n          )}\n        >\n          {props.isLoading && (\n            <div className=\"demo-loading-container\">\n              <Spin />\n            </div>\n          )}{\" \"}\n        </List>\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default RecipeList;\n","import React from \"react\";\n\n// const reducer = (accumulator, currentValue) => accumulator + currentValue.ingredient + \"\\n\";\n\nfunction formatList(stri) {\n  return stri.split(/\\r?\\n/).map((currElement, index) => {\n  return `${index+1}. ${currElement}`; //equivalent to list[index]\n}).join(\"\\n\");\n}\n\nfunction Recipe(props) {\n\n  if (props.recipe) {\n  return (\n    <div className=\"instructions\">\n      <h1> {props.recipe.title}</h1>\n      <h3>ingredients: </h3>\n      <p>{formatList(props.recipe.ingredients.map(x => `${x.quantity} ${x.ingredient}`).join(\"\\n\"))}</p>      \n      <h3>Instructions: </h3>\n      <p>{formatList(props.recipe.instructions)}</p>\n    </div>\n  );\n  }\n  else {\n    return (\n      <div>\n      <h2>\n      No recipe selected\n      </h2>\n      </div>\n    )\n  }\n}\n\nexport default Recipe;\n","import React from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport axios from \"axios\";\naxios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\";\naxios.defaults.xsrfCookieName = \"csrftoken\";\n\nconst { TextArea } = Input;\nclass IngInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"A text was submitted: \" + this.state.value);\n    let ing_arr = this.state.value.split(/[\\n,]+/);\n    let req_json = {\n      start: 0,\n      end: 4,\n      ing_arr: ing_arr,\n    };\n    const requestOptions = {\n      headers: { \"Content-Type\": \"application/json\" },\n      data: req_json,\n    };\n    axios\n      .post(\"http://localhost:8000/api/ing_query\", requestOptions)\n      .then((response) => response.data)\n      .then((data) => this.props.callback(data));\n  }\n\n  handleFake = (event) => {\n    const requestOptions = {\n      headers: { \"Content-Type\": \"application/json\" },\n    };\n    axios\n      .get(\"http://localhost:8000/api/allrecipes\", requestOptions)\n      .then((response) => response.data)\n      .then((data) => this.props.callback(data));\n  };\n\n  render() {\n    const tailLayout = {\n      wrapperCol: { offset: 8, span: 16 },\n    };\n    return (\n      <form>\n        <div className=\"ing-input\">\n          <h2>Input ingredients here</h2>\n          <p>separated by commas or new lines</p>\n          <TextArea\n            placeholder=\"Input ingredients here\"\n            className=\"ing-text\"\n            rows={15}\n            onChange={this.handleChange}\n          />\n          <Button type=\"primary\" htmlType=\"submit\" onClick={this.handleSubmit}>\n            Get Recipes!\n          </Button>\n          <Button type=\"primary\" onClick={this.handleFake}>\n            LoadAll\n          </Button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default IngInput;\n","import React from \"react\";\nimport RecipeList from \"../containers/RecipeListView.js\";\nimport Recipe from \"./Recipe.js\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport IngInput from \"./IngInput.js\";\nimport axios from \"axios\";\nvar count = 4;\n\nclass RecipeSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initLoading: true,\n      isLoading: false,\n      data: [],\n      list: [],\n      curr: 0,\n      selectedRecipe: 2,\n      hasMore: true,\n    };\n  }\n\n  componentDidMount() {\n    count = 10;\n    this.getData((res) => {\n      this.setState({\n        initLoading: false,\n        data: res,\n        list: res,\n      });\n    });\n  }\n\n  getData = (callback) => {\n    axios(\n      `http://localhost:8000/api/slicerecipes?start=${this.state.curr}&count=${count}`\n    ).then((response) => callback(response.data));\n  };\n\n  onLoadMore = () => {\n    console.log(\"loading more\");\n    this.setState({\n      isLoading: true,\n      curr: this.state.curr + count,\n    });\n    this.getData((res) => {\n      if (!Array.isArray(res) || !res.length) {\n        this.setState({ hasMore: false });\n        console.log('received all ')\n      }\n      const data = this.state.data.concat(res);\n      this.setState(\n        {\n          data,\n          list:data,\n          loading: false,\n        },\n        () => {\n          window.dispatchEvent(new Event(\"resize\"));\n        }\n      );\n      console.log(\"curr\");\n    });\n    this.setState({ isLoading: false });\n  };\n\n  setList = (recipeList) => {\n    this.setState({ list: recipeList });\n  };\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col xs={3}>\n            <IngInput callback={this.setList} className=\"ing-input\" />\n          </Col>\n          <Col xs={4}>\n            <RecipeList\n              onLoadMore={this.onLoadMore}\n              list={this.state.list}\n              onClick={(index) => () =>\n                this.setState({ selectedRecipe: index })}\n              hasMore={this.state.hasMore}\n            />\n          </Col>\n          <Col>\n            <Recipe recipe={this.state.list[this.state.selectedRecipe]} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default RecipeSelect;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport RecipeSelect from \"./components/RecipeSelect.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RecipeSelect />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about servicei workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}